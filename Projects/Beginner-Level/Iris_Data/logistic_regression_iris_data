
%matplotlib inline
import pandas as pd
import warnings # current version of seaborn generates a bunch of warnings that we'll ignore
warnings.filterwarnings("ignore")
import seaborn as sns
import matplotlib.pyplot as plt
sns.set(style="white", color_codes=True)

iris = pd.read_csv("../data/iris.data.txt",names = ['sepal_length_in_cm','sepal_width_in_cm','petal_length_in_cm','petal_width_in_cm','class']) # the iris dataset is now a Pandas DataFrame
iris.head()
len(iris)
iris["class"].value_counts()
iris.plot(kind="scatter", x="sepal_length_in_cm", y="sepal_width_in_cm")
sns.jointplot(x="sepal_length_in_cm", y="sepal_width_in_cm", data=iris, size=5)

import seaborn as sns
sns.set(style="white", color_codes=True)
sns.boxplot(x="class", y="petal_length_in_cm", data=iris)

from sklearn import metrics
from sklearn.linear_model import LogisticRegression
from sklearn.cross_validation import train_test_split
train, test = train_test_split(iris, test_size = 0.2)
len(train)
len(test)
train.columns
x_train = train[[u'sepal_length_in_cm', u'sepal_width_in_cm', u'petal_length_in_cm',u'petal_width_in_cm']]
x_train.columns
y_train = train['class']
x_test = test[[u'sepal_length_in_cm', u'sepal_width_in_cm', u'petal_length_in_cm',u'petal_width_in_cm']]
y_test = test['class']
len(x_train)
len(y_train)
len(x_test)
len(y_test)

model = LogisticRegression()
model.fit(x_test, y_test)
model.score(x_test, y_test)
#Equation coefficient and Intercept
print('Coefficient: \n', model.coef_)
print('Intercept: \n', model.intercept_)
#Predict Output
predicted= model.predict(x_test)
print predicted
import numpy
accuracy = (y_test == predicted).sum() / float(len(y_test))
print accuracy
from sklearn.metrics import confusion_matrix
confusion_matrix(y_test, predicted)








       




